@model IEnumerable<ExpensesTracker.Models.Expense>

<div class="container my-5">
    <h3 class="mb-4 text-center fw-bold text-primary-emphasis">My Expenses</h3>

    <div class="d-flex justify-content-center mb-3">
        <div class="d-flex gap-2">
            <select id="yearSelect" class="form-select">
                @for (int year = DateTime.Now.Year; year >= DateTime.Now.Year - 5; year--)
                {
                    <option value="@year" selected="@(year == DateTime.Now.Year ? "selected" : null)">@year</option>
                }
            </select>
            <select id="monthSelect" class="form-select">
                @{
                    var currentMonth = DateTime.Now.Month;
                    var months = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames;
                    for (int m = 1; m <= 12; m++)
                    {
                        if (m == currentMonth)
                        {
                            <option value="@m" selected>@months[m - 1]</option>
                        }
                        else
                        {
                            <option value="@m">@months[m - 1]</option>
                        }
                    }
                }
            </select>
            <button id="filterBtn" class="btn btn-primary btn-sm d-flex align-items-center">
                <i class="bi bi-funnel me-1"></i> Filter
            </button>

        </div>
    </div>

    <div class="table-responsive shadow-sm rounded">
        <table class="table table-hover align-middle">
            <thead class="table-primary">
                <tr>
                    <th scope="col">Description</th>
                    <th scope="col">Amount (AED)</th>
                    <th scope="col">Category</th>
                    <th scope="col">Date</th>
                </tr>
            </thead>
            <tbody id="expensesTableBody">
                @if (Model != null && Model.Any())
                {
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@item.Description</td>
                            <td>@item.Amount.ToString("0.00")</td>
                            <td>@item.Category</td>
                            <td>@item.Date.ToString("yyyy-MM-dd")</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="4" class="text-center text-muted py-4">
                            <i class="bi bi-inbox" style="font-size: 2rem;"></i>
                            <div class="mt-2">No Records Available</div>
                            <small>No expenses found for the selected month.</small>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<div class="container my-5">
    <h3 class="mb-4 text-center fw-bold text-primary-emphasis">Expenses Overview</h3>

    <div class="d-flex justify-content-center">
        <div class="shadow-sm rounded p-3 bg-light" style="max-width: 500px;">

            <canvas id="myChart" style="max-height: 450px;"></canvas>

            <div id="noChartData" class="text-center text-muted py-4" style="display: none;">
                <i class="bi bi-pie-chart" style="font-size: 3rem;"></i>
                <div class="mt-2">No Data Available</div>
                <small>No expenses found for the selected month.</small>
            </div>

        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    const ctx = document.getElementById('myChart');
    const noChartData = document.getElementById('noChartData');
    let chartInstance = null;

    function loadChart(year, month) {
        fetch(`/Expenses/GetChart?year=${year}&month=${month}`)
            .then(response => response.json())
            .then(data => {
                if (chartInstance) {
                    chartInstance.destroy();
                    chartInstance = null;
                }

                if (data && data.length > 0) {
                    // Show chart & hide no data message
                    ctx.style.display = 'block';
                    noChartData.style.display = 'none';

                    chartInstance = new Chart(ctx, {
                        type: 'pie',
                        data: {
                            labels: data.map(d => d.category),
                            datasets: [{
                                data: data.map(d => d.total),
                                backgroundColor: [
                                    '#0d6efd', '#6f42c1', '#198754', '#fd7e14', '#dc3545',
                                    '#20c997', '#0dcaf0', '#ffc107', '#6610f2', '#adb5bd'
                                ],
                                borderColor: '#ffffff',
                                borderWidth: 1
                            }]
                        },
                        options: {
                            plugins: {
                                legend: { position: 'bottom' },
                                tooltip: {
                                    callbacks: {
                                        label: function (context) {
                                            return `${context.label}: AED ${context.parsed.toFixed(2)}`;
                                        }
                                    }
                                }
                            }
                        }
                    });
                } else {
                    // Hide chart, show no data message
                    ctx.style.display = 'none';
                    noChartData.style.display = 'block';
                }
            })
            .catch(error => {
                console.error('Error loading chart:', error);
                ctx.style.display = 'none';
                noChartData.style.display = 'block';
            });
    }

    function loadTable(year, month) {
        fetch(`/Expenses/GetExpensesTable?year=${year}&month=${month}`)
            .then(response => response.text())
            .then(html => {
                const tableBody = document.getElementById('expensesTableBody');
                if (html.trim() === '' || html.includes('No Records Available')) {
                    tableBody.innerHTML = `
                        <tr>
                            <td colspan="4" class="text-center text-muted py-4">
                                <i class="bi bi-inbox" style="font-size: 2rem;"></i>
                                <div class="mt-2">No Records Available</div>
                                <small>No expenses found for the selected period.</small>
                            </td>
                        </tr>
                    `;
                } else {
                    tableBody.innerHTML = html;
                }
            })
            .catch(error => {
                console.error('Error loading table:', error);
                document.getElementById('expensesTableBody').innerHTML = `
                    <tr>
                        <td colspan="4" class="text-center text-muted py-4">
                            <i class="bi bi-exclamation-triangle" style="font-size: 2rem;"></i>
                            <div class="mt-2">Error Loading Data</div>
                            <small>Please try again later.</small>
                        </td>
                    </tr>
                `;
            });
    }

    document.getElementById('filterBtn').addEventListener('click', function () {
        const year = document.getElementById('yearSelect').value;
        const month = document.getElementById('monthSelect').value;
        loadChart(year, month);
        loadTable(year, month);
    });

    // Load current month data on initial load
    const initialYear = new Date().getFullYear();
    const initialMonth = new Date().getMonth() + 1;
    loadChart(initialYear, initialMonth);
    loadTable(initialYear, initialMonth);

</script>